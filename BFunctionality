#include <msp430.h> 

/*
 * main.c
 */

unsigned short l,m,r;

void main(void){

	WDTCTL = WDTPW + WDTHOLD;
                                                    // clear interrupt flag1
	                                        // disable WD
    while(1){
    	l = left();
    	m = middle();
    	r = right();
    }
}

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
	
	return 0;
}

unsigned short left()
{
	unsigned short range;
	ADC10CTL0 = ADC10SHT_3 + ADC10ON + ADC10IE;
	ADC10CTL1 = INCH_3;
	ADC10AE0 |= BIT3;
	ADC10CTL1 |= ADC10SSEL1|ADC10SSEL0;
	P1DIR |= BIT0;

		ADC10CTL0 |= ENC + ADC10SC;
		__bis_SR_register(CPUOFF + GIE);
		range = ADC10MEM;
		if (range < 0x1FF){
			P1OUT &= ~BIT0;
		}
		else{
			P1OUT |= BIT0;
		}
		return(range);
}

unsigned short middle()
{
  unsigned short range;           // Stop WDT
  ADC10CTL0 = ADC10SHT_3 + ADC10ON + ADC10IE; // ADC10ON, interrupt enabled
  ADC10CTL1 = INCH_4;                       // input A4
  ADC10AE0 |= BIT4;                         // PA.1 ADC option select
  ADC10CTL1 |= ADC10SSEL1|ADC10SSEL0;                // Select SMCLK
  P1DIR |= BIT0|BIT6;                            // Set P1.0 to output direction

    ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    __bis_SR_register(CPUOFF + GIE);        // LPM0, ADC10_ISR will force exit
    range = ADC10MEM;
    if (range < 0x1FF){
      P1OUT &= ~(BIT0|BIT6);                       // Clear P1.0 LED off
    }
     else{
      P1OUT |= BIT0|BIT6;                        // Set P1.0 LED on
	}
    return(range);
}


unsigned short right()
{
	unsigned short range;
	WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
	ADC10CTL0 = ADC10SHT_3 + ADC10ON + ADC10IE; // ADC10ON, interrupt enabled
	ADC10CTL1 = INCH_5;                       // input A4
	ADC10AE0 |= BIT5;                         // PA.1 ADC option select
	ADC10CTL1 |= ADC10SSEL1|ADC10SSEL0;                // Select SMCLK
	P1DIR |= BIT6;                            // Set P1.0 to output direction

    ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    __bis_SR_register(CPUOFF + GIE);        // LPM0, ADC10_ISR will force exit
    range = ADC10MEM;
    if (range < 0x1FF)
      P1OUT &= ~BIT6;                       // Clear P1.0 LED off
     else
      P1OUT |= BIT6;                        // Set P1.0 LED on
    return(range);
}

#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void) {
	__bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
}
